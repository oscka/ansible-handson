# Role 을 별도로 만들기에는 작은 task들을 모음
---
- hosts: "masters, workers"      # hosts들을 그룹으로 묶어 task를 지정 가능
  remote_user: kube
  become: true
  become_method: sudo
  become_user: root
  gather_facts: yes

  vars:
    KUBERNETES_VER: "1.24.4-00"


  tasks:
    ## Docker 기반이 아니라 Containerd 기반으로 설치하기 때문에 Docker는 설치 필요 없음
    ## containerd 설정 1/3
    - name: containerd 설정파일 생성
      file:
        path: "/etc/modules-load.d/containerd.conf"
        state: "touch"

     ## containerd 설정 2/3
     ## IP table이  bridged traffic을 볼 수 있도록 허용
    - name: containerd config 설정 추가
      blockinfile:  # 파일에 block를 추가
        path: "/etc/modules-load.d/containerd.conf"
        block: |
          overlay
          br_netfilter
     ## containerd 설정 적용 3/3
    - name: modprobe
      shell: |
        sudo modprobe overlay
        sudo modprobe br_netfilter

    ## network 설정( 설정 file 생성) 1/2
    - name: Kubernetes networking 대한 system configurations 설정 
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: "touch"

    ## network 설정( IP forwarding 활성화) 2/2
    ## net.bridge.bridge-nf-call-iptables의 default값이 0이며 이는  bridge 네트워크를 통해 송수신 되는 패킷이 iptable 설정을 우회한다는 의미
    ## 하지만 컨테이너의 네트워크 패킷이 호스트머신의 iptable 설정에 따라 제어되도록 하는 것이 바람직하며, 이를 위해 1로 설정해주어야 한다
    - name: containerd 설정 추가 
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: 설정사항 재반영 
      command: sudo sysctl --system

    ## 
    - name: containerd 설치 
      shell: |
        sudo apt-get update && sudo apt-get install -y containerd
        sudo mkdir -p /etc/containerd
        sudo containerd config default | sudo tee /etc/containerd/config.toml
        sudo systemctl restart containerd
    
    ## swap 끄기
    - name: swap 끄기
      shell: |
        sudo swapoff -a

        # swap이 들어간 Line 주석 처리
        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    ## kubeadm, kubelet, kubectl 설치 1/4 
    ## package update 및 apt-transport-https, curl  설치 , google kubernetes apt-key 등록
    - name: package update 및 apt-transport-https, curl  설치 , google kubernetes apt-key 등록
      shell: |
        sudo apt-get update && sudo apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    
    ## kubeadm, kubelet, kubectl 설치 2/4 
    ## k8s Repo 추가 1/2
    - name: k8s Repo 추가 1/2
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: "touch"

    ## kubeadm, kubelet, kubectl 설치 3/4 
    ## k8s Repo 추가 2/2
    - name: k8s Repo 추가 2/2
      blockinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        block: |
          deb https://apt.kubernetes.io/ kubernetes-xenial main


    ## kubeadm, kubelet, kubectl 설치 및 변경 방지 4/4 
    ## apt-mark hold -> 버전을 고정시킴, unmark해야 변경가능
    ## kubeadm은 설치용 kubelet을 각 노드를 관리해주는 역할   
    - name: kubelet, kubeadm, kubectl 설치
      shell: |
        sudo apt-get update
        sudo apt-get install -y kubelet={{KUBERNETES_VER}} kubeadm={{KUBERNETES_VER}} kubectl={{KUBERNETES_VER}}
        sudo apt-mark hold kubelet kubeadm kubectl
      register: command_output
  

    - debug:
        var: command_output
    
      